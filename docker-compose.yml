# https://docs.docker.com/compose/environment-variables/

version: "2.4"

services:
  reverse-proxy:
    image: traefik:v2.5
    command: --api.insecure=true --providers.docker
    restart: always
    container_name: traefik-reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./conf/traefik.yml:/etc/traefik/traefik.yml
      - ./conf/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
      - ./conf/acme.json:/acme.json
      - ./log:/log

  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG}
    restart: ${RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    pids_limit: 100
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
    environment:
      # timezone inside container
      - TZ

      # necessary Postgres options/variables
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB

  mattermost:
    depends_on:
      - postgres
    image: mattermost/${MATTERMOST_IMAGE}:${MATTERMOST_IMAGE_TAG}
    restart: ${RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    pids_limit: 200
    read_only: ${MATTERMOST_CONTAINER_READONLY}
    tmpfs:
      - /tmp
    labels:
      - traefik.http.middlewares.mattermost-redirect-to-websecure.redirectscheme.scheme=https
      - traefik.http.middlewares.mattermost-security.headers.stsIncludeSubdomains=false
      - traefik.http.middlewares.mattermost-security.headers.stsPreload=true
      - traefik.http.middlewares.mattermost-security.headers.stsSeconds=31536000
      - traefik.http.middlewares.mattermost-security.headers.forceSTSHeader=true
      - traefik.http.middlewares.mattermost-secured.chain.middlewares=mattermost-redirect-to-websecure,mattermost-security
      - traefik.http.routers.matteremost.middlewares=mattermost-secured
      - traefik.http.routers.matteremost.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.matteremost.tls=true
      - traefik.http.routers.matteremost.tls.options=default
      - traefik.http.routers.matteremost.entrypoints=web, websecure
      - traefik.http.services.matteremost.loadbalancer.server.port=8065
      - traefik.http.routers.matteremost.tls.certresolver=myresolver
    volumes:
      - ${MATTERMOST_CONFIG_PATH}:/mattermost/config:rw
      - ${MATTERMOST_DATA_PATH}:/mattermost/data:rw
      - ${MATTERMOST_LOGS_PATH}:/mattermost/logs:rw
      - ${MATTERMOST_PLUGINS_PATH}:/mattermost/plugins:rw
      - ${MATTERMOST_CLIENT_PLUGINS_PATH}:/mattermost/client/plugins:rw
      - ${MATTERMOST_BLEVE_INDEXES_PATH}:/mattermost/bleve-indexes:rw
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority
      # (link: https://github.com/mattermost/mattermost-server/issues/13059 and https://github.com/mattermost/docker/issues/34)
      # - ${GITLAB_PKI_CHAIN_PATH}:/etc/ssl/certs/pki_chain.pem:ro
    environment:
      # timezone inside container
      - TZ

      # necessary Mattermost options/variables (see env.example)
      - MM_SQLSETTINGS_DRIVERNAME
      - MM_SQLSETTINGS_DATASOURCE

      # necessary for bleve
      - MM_BLEVESETTINGS_INDEXDIR

      # additional settings
      - MM_SERVICESETTINGS_SITEURL

  chatbot:
    image: ghcr.io/yguy/chatgpt-mattermost-bot:latest
    restart: unless-stopped
    depends_on:
      - mattermost
    environment:
      MATTERMOST_URL: ${CHATGPT_MATTERMOST_URL}
      MATTERMOST_TOKEN: ${CHATGPT_MATTERMOST_TOKEN}
      OPENAI_API_KEY: ${CHATGPT_OPENAI_API_KEY}

  backup_postgres:
    image: appleboy/docker-backup-database:postgres-13
    logging:
      options:
        max-size: "100k"
        max-file: "3"
    container_name: backup_postgres_to_s3
    environment:
      STORAGE_DRIVER: s3
      STORAGE_ENDPOINT: s3.amazonaws.com
      STORAGE_BUCKET: santa-db-backup
      STORAGE_REGION: ap-southeast-1
      STORAGE_PATH: backup_mattermost
      STORAGE_SSL: "true"
      STORAGE_INSECURE_SKIP_VERIFY: "false"
      ACCESS_KEY_ID: ${ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${SECRET_ACCESS_KEY}

      DATABASE_DRIVER: postgres
      DATABASE_HOST: postgres:5432
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_OPTS:

      TIME_SCHEDULE: "0 */6 * * *"
      TIME_LOCATION: Asia/Taipei
    links:
      - postgres

# If you use rolling image tags and feel lucky watchtower can automatically pull new images and
# instantiate containers from it. https://containrrr.dev/watchtower/
# Please keep in mind watchtower will have access on the docker socket. This can be a security risk.
#
#  watchtower:
#    container_name: watchtower
#    image: containrrr/watchtower:latest
#    restart: unless-stopped
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
